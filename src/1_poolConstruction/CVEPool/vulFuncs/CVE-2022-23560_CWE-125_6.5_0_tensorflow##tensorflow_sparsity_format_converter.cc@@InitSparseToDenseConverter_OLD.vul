
  dense_shape_ = std::move(shape);
  traversal_order_ = std::move(traversal_order);
  block_map_ = std::move(block_map);
  format_ = std::move(format);

  dense_size_ = 1;
  for (int i = 0; i < dense_shape_.size(); i++) 
    dense_size_ *= dense_shape_[i];
  

  dim_metadata_.resize(2 * format_.size());
  for (int i = 0; i < format_.size(); i++) 
    if (format_[i] == kTfLiteDimDense) 
      dim_metadata_[2 * i] = dense_size[i];
     else 
      dim_metadata_[2 * i] = std::move(segments[i]);
      dim_metadata_[2 * i + 1] = std::move(indices[i]);
    
  

  int original_rank = dense_shape_.size();
  int block_dim = 0;

  blocked_shape_.resize(original_rank);
  block_size_.resize(block_map_.size());
  for (int i = 0; i < original_rank; i++) 
    if (block_dim < block_map_.size() && block_map_[block_dim] == i) 
      int orig_dim = traversal_order_[original_rank + block_dim];
      block_size_[block_dim] = dense_size[orig_dim];
      blocked_shape_[i] = dense_shape_[i] / dense_size[orig_dim];
      block_dim++;
     else 
      blocked_shape_[i] = dense_shape_[i];
    
  
